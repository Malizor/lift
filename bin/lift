#!/usr/bin/python
# -*- coding: utf-8 -*-

# LIFT Integration-Functional Testing - High level test framework
# Copyright Â© 2014 SmartJog S.A
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
# USA.

"""The lift binary"""

import os
import sys

import lift
from lift.loader import load_config_file
from lift.exception import InvalidDescriptionFile


if __name__ != '__main__':
    sys.exit('The lift binary can only be executed.')


# Top-level check
if not os.path.isfile('lift.yaml'):
    sys.exit('No lift.yaml file found in this folder.')

# TODO: option
color = True

# Folder mapping, used for remotes and environment inheritance
mapping = []
tests_count = 0.0
# Failed tests objects (including sub folders), used for the final summary
all_failed_tests = []
for directory, _, _ in os.walk('.'):
    if not os.path.isfile(os.path.join(directory, 'lift.yaml')):
        continue

    # Figures out the inheritance of remotes and environments

    # These default will only be used for the root folder (empty mapping)
    remotes = {}
    environment = {}

    # inherit from the closer known upper folder
    for ancestor in reversed(mapping):
        if not directory.startswith(ancestor['dir']):
            continue
        remotes = ancestor['remotes'].copy()
        environment = ancestor['environment'].copy()
        break

    # Load the description file
    try:
        tests, remotes, environment = load_config_file(os.path.join(directory, 'lift.yaml'),
                                                       remotes,
                                                       environment)
        mapping.append({'dir': directory,
                        'remotes': remotes,
                        'environment': environment})
    except InvalidDescriptionFile as e:
        sys.exit('%s is not a valid description file: %s'
                 % (os.path.join(directory, 'lift.yaml'), e))

    for test in tests:
        tests_count += 1
        try:
            sys.stdout.write('Running %s/%s...' % (directory, test.name))
            sys.stdout.flush()
            status = test.run()
        except Exception as e:
            status = False
            test.stdout = 'An exception was raised during the test execution!'
            test.stderr = str(e)
        res_string = '\r%s/%s {0:>{1}}\n' % (directory, test.name)
        if status:
            # TODO: align status according to output size
            if color:
                # Green
                print(res_string.format('\033[92mOK\033[0m', 89 - len(res_string)))
            else:
                print(res_string.format('OK', 80 - len(res_string)))
        else:
            all_failed_tests.append(test)
            if color:
                # Red
                print(res_string.format('\033[91mFAIL\033[0m', 89 - len(res_string)))
            else:
                print(res_string.format('FAIL', 80 - len(res_string)))

            if test.stdout:
                print('STDOUT:\n%s\n' % test.stdout)
            if test.stderr:
                print('STDERR:\n%s\n' % test.stderr)

# All tests were run, print a summary
print('\nEnd of tests.')
if all_failed_tests:
    print('\nSummary of failed tests:\n')
    print('=' * 80)
for test in all_failed_tests:
    if test.return_code != test.expected_return_code:
        print('\n%s/%s returned %d instead of %d\n' % (test.directory,
                                                       test.name,
                                                       test.return_code,
                                                       test.expected_return_code))
        if test.stdout:
            print('STDOUT was:\n%s\n' % test.stdout)
        if test.stderr:
            print('STDERR was:\n%s\n' % test.stderr)

        print('=' * 80)

success_count = tests_count - len(all_failed_tests)
print('\nPass rate: %d/%d (%d%%)\n' % (success_count,
                                       tests_count,
                                       int(round((success_count / tests_count) * 100))))

if all_failed_tests:
    sys.exit(1)
else:
    print('Congratulation! \o/\n')

# TODO
# option --verbose
# upper inheritance
